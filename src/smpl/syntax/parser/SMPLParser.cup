package smpl.syntax.parser;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

import smpl.exceptions.SMPLSyntaxException;

import smpl.syntax.Binding;
import smpl.syntax.CaseClause;

import smpl.syntax.lexer.SMPLLexer;

import smpl.syntax.ast.core.Exp;
import smpl.syntax.ast.core.SMPLProgram;
import smpl.syntax.ast.*;

import smpl.types.SMPLValue;
import smpl.types.compound.SMPLPair;
import smpl.types.compound.SMPLVector;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.println("Line " + lexer.getLine());

            int column = lexer.getColumn();

            for (int i = 0; i < column; i++) {
                System.err.print(lexer.yycharat(i));
            }
            System.err.println();

            // print an indicator on screen that will show the user
            // where the error is
            String indicator = String.format("%" + lexer.getColumn() + "s","^");
            System.err.println(indicator);

		    report_error("Syntax error", cur_token);
		}
	    :};

init with {:
	  :};

scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
                       lexer.getText() + ">";
		    throw new SMPLSyntaxException(msg, ioe);
		}
	  :};

/* Terminals (tokens returned by the scanner). */

// special symbols
terminal LBRACKET, RBRACKET, LPAREN, RPAREN, LBRACE, RBRACE;
terminal COMMA, SEMI, COLON, ASSIGN;

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, POW;

// bitwise operators
terminal BAND, BOR, BNOT;

// relational operators
terminal EQ, GT, LT, LTEQ, GTEQ, NEQ;

// logical operators
terminal AND, OR, NOT;

// list concatenation
terminal CONCAT;

// empty list
terminal NIL;

// keywords
terminal DEF, LET, PROC, CALL, PRINT, PRINTLN, READ, READINT;
terminal IF, THEN, ELSE, CASE;

// terminals with values
terminal String ID;
terminal Integer INT;
terminal Double DOUBLE;
terminal String STRING;
terminal Character CHARACTER;
terminal Boolean BOOLEAN;
non terminal ExpList listExp;
non terminal ExpVector vecExp;
non terminal ExpIndexVector indexVecExp;

/* Non terminals */
non terminal SMPLProgram program;
non terminal StmtSequence stmtList;
non terminal Statement stmt;
non terminal StmtAssignment assignStmt;
non terminal StmtDefinition defStmt;
non terminal Exp expression;
non terminal Exp multiExp;
non terminal ArrayList<String> IDs;
non terminal ArrayList<String> IDList;
non terminal ExpSequence expressions;
non terminal ExpSequence expressionList;
non terminal Binding binding;
non terminal ArrayList<Binding> bindings;
non terminal ArrayList<Binding> bindingsAux;
non terminal StmtLet letStmt;

/* conditional non-terminals */
non terminal StmtIfElse ifStmt;
non terminal StmtCase caseStmt;
non terminal CaseClause clause;
non terminal ArrayList<CaseClause> clauses;
non terminal ArrayList<CaseClause> clauseLst;

non terminal Exp binopExp;

/* procedure non-terminals */
non terminal Exp procExp;
non terminal Exp callExp;

/* side effect non-terminals */
non terminal Statement inStmt;
non terminal Statement outStmt;

/* logical non-terminals */
non terminal Exp logicExp;
non terminal Exp orComp;

/* relational non-terminals */
non terminal Exp relExp;

/* bitwise non-terminals */
non terminal Exp bitExp;

/* arithmetic expressions */
non terminal Exp arithExp;
non terminal Exp term;
non terminal Exp factor;
non terminal Exp unary;
non terminal Exp primary;
non terminal SMPLValue<?> literal;
non terminal empty;

/* Grammar rules */

program ::= stmtList:s {: RESULT = new SMPLProgram(s); :};

stmtList ::= stmtList:lst stmt:s {:
                lst.add(s); 
                RESULT = lst;
		     :} |
	         stmt:s {:
		        RESULT = new StmtSequence(s);
		     :};

stmt ::= assignStmt:a SEMI {: RESULT = a; :} |
         defStmt:d SEMI {: RESULT = d; :} |
         outStmt:io SEMI {: RESULT = io; :} |
         letStmt:let SEMI {: RESULT = let; :} |
         ifStmt:i SEMI {: RESULT = i; :} |
         caseStmt:c {: RESULT = c; :} |
         expression:e SEMI {: RESULT = new Statement(e); :};

ifStmt ::= IF logicExp:pred THEN expression:then {:
                RESULT = new StmtIfElse(pred, then); :} |
           IF logicExp:pred THEN expression:then ELSE expression:alt {:
                RESULT = new StmtIfElse(pred, then, alt); :};
        
caseStmt ::= CASE LBRACE clauses:c ELSE COLON stmt:d RBRACE {:
                RESULT = new StmtCase(c, d); :} |
             CASE LBRACE clauses:c RBRACE {:
                RESULT = new StmtCase(c); :};

clause ::= logicExp:pred COLON stmt:action {:
                RESULT = new CaseClause(pred, action); :};

clauses ::= clause:c clauseLst:clst {:
                clst.add(0, c);
                RESULT = clst;
            :} |
            empty {: RESULT = new ArrayList(); :};

clauseLst ::= clause:c clauseLst:clst {:
                clst.add(0, c);
                RESULT = clst;
              :} |
              empty {: RESULT = new ArrayList(); :};

assignStmt ::= IDs:id ASSIGN expressions:e  {:
                RESULT = new StmtAssignment(id, e); :};

defStmt ::= DEF ID:id procExp:e {:
                RESULT = new StmtDefinition(id, e); :};

IDs ::= ID:id IDList:idl {:
            idl.add(0, id);
            RESULT = idl;
        :} |
        empty {: RESULT = new ArrayList(); :};

IDList ::= COMMA ID:id IDList:idl {:
                idl.add(0, id);
                RESULT = idl;
            :} |
            empty {: RESULT = new ArrayList(); :};

multiExp ::= LPAREN expressions:exps RPAREN {: RESULT = new MultiExp(exps); :};

expression ::= binopExp:b {: RESULT = b; :} |
               LBRACE stmtList:body RBRACE {: RESULT = body; :};

expressions ::= procExp:e expressionList:el {:
                    el.add(e);
                    RESULT = el;
                :} |
                empty {: RESULT = new ExpSequence(); :};

expressionList ::= COMMA procExp:e expressionList:el {:
                        el.add(e);
                        RESULT = el;
                    :} |
                    empty {: RESULT = new ExpSequence(); :};

letStmt ::= LET LPAREN bindings:bs RPAREN expression:body {:
		        RESULT = new StmtLet(bs, body); :};

binding ::= ID:v ASSIGN procExp:e {:
                RESULT = new Binding(v, e); :};

bindings ::= binding:b bindingsAux:bl {:
                bl.add(0,b);
                RESULT = bl;
             :} |
             empty {: RESULT = new ArrayList(); :};

bindingsAux ::= COMMA binding:b bindingsAux:bl {:
                    bl.add(0,b);
                    RESULT = bl;
                :} |
		        empty {: RESULT = new ArrayList(); :};

listExp ::= LBRACKET expressions:e RBRACKET {:
                RESULT = new ExpList(e); :};

vecExp ::= LBRACKET COLON expressions:e COLON RBRACKET {:
                RESULT = new ExpVector(e); :};

indexVecExp ::= primary:p LBRACKET logicExp:n RBRACKET {:
                    RESULT = new ExpIndexVector(p, n); :};

callExp ::= primary:p LPAREN expressions:e RPAREN {:
                RESULT = new ExpCall(p, e); :} |
            CALL LPAREN primary:p COMMA expressions:e RPAREN {:
                RESULT =  new ExpCall(p, e); :};

outStmt ::= PRINT LPAREN procExp:e RPAREN  {:
                RESULT = new StmtPrint(e); :} |
            PRINTLN LPAREN procExp:e RPAREN  {:
                RESULT = new StmtPrintLn(e); :};

inStmt ::= READ LPAREN RPAREN {:
                RESULT = new StmtRead(); :} |
           READINT LPAREN RPAREN {:
                RESULT = new StmtReadInt(); :};

binopExp ::= listExp:l CONCAT listExp:r {: RESULT = new ExpConcat(l, r); :} |
             procExp:p {: RESULT = p; :};

procExp ::= PROC LPAREN IDs:p RPAREN expression:body {:
                RESULT = new ExpProcedure(p, body); :} |
            PROC ID:id expression:body {:
                RESULT = new ExpProcedure(id, body); :} |
            logicExp:l {: RESULT = l; :};

logicExp ::= logicExp:e OR orComp:o {:
                RESULT = new ExpOr(e, o); :} |
              orComp:o {: RESULT = o; :};

orComp ::= orComp:o AND relExp:r {:
                RESULT = new ExpAnd(o, r); :} |
           relExp:r {: RESULT = r; :};

relExp ::= relExp:r NEQ bitExp:b {:
                RESULT = new ExpNEQ(r, b); :} |
           relExp:r GTEQ bitExp:b {:
                RESULT = new ExpGTEQ(r, b); :} |
           relExp:r LTEQ bitExp:b {:
                RESULT = new ExpLTEQ(r, b); :} |
           relExp:r LT bitExp:b {:
                RESULT = new ExpLT(r, b); :} |
           relExp:r GT bitExp:b {:
                RESULT = new ExpGT(r, b); :} |
           relExp:r EQ bitExp:b {:
                RESULT = new ExpEQ(r, b); :} |
           bitExp:b {: RESULT = b; :};

bitExp ::= bitExp:b BOR arithExp:a {:
                RESULT = new ExpBOR(b, a); :} |
           bitExp:b BAND arithExp:a {:
                RESULT = new ExpBAND(b, a); :} |
           arithExp:a {: RESULT = a; :};

arithExp ::= arithExp:e PLUS term:t {:
                RESULT = new ExpAdd(e, t); :} |
             arithExp:e MINUS term:t {:
                RESULT = new ExpSub(e, t); :} |
		     term:t {: RESULT = t; :};

term ::= term:t MUL factor:f {:
		    RESULT = new ExpMul(t, f); :} |
	     term:t DIV factor:f {:
		    RESULT = new ExpDiv(t, f); :} |
	     term:t MOD factor:f {:
		    RESULT = new ExpMod(t, f); :} |
	     factor:f {: RESULT = f; :};

factor ::= unary:u POW factor:f {:
            RESULT = new ExpPow(u, f); :} |
           unary:u {: RESULT = u; :};

unary ::= PLUS unary:u {: RESULT = new ExpUnary("+", u); :} |
          MINUS unary:u {: RESULT = new ExpUnary("-", u); :} |
          BNOT unary:u {: RESULT = new ExpBNOT(u); :} |
          NOT unary:u {: RESULT = new ExpNot(u); :} |
          primary:p {: RESULT = p; :};

primary ::= literal:lit {: RESULT = new ExpLit(lit); :} |
	        ID:id {: RESULT = new ExpId(id); :} |
            callExp:cl {: RESULT = cl; :} |
            vecExp:vec {: RESULT = vec; :} |
            indexVecExp:ivec {: RESULT = ivec; :} |
            listExp:lst {: RESULT = lst; :} |
            inStmt:in {: RESULT = in; :} |
	        LPAREN expression:e RPAREN {: RESULT = e; :};

literal ::= INT:ilit {: RESULT = SMPLValue.make(ilit); :} |
            DOUBLE:dlit {: RESULT = SMPLValue.make(dlit); :} |
            STRING:slit {: RESULT = SMPLValue.make(slit); :} |
            CHARACTER:chlit {: RESULT = SMPLValue.make(chlit); :} |
            BOOLEAN:blit {: RESULT = SMPLValue.make(blit); :} |
            NIL:nil {: RESULT = new SMPLPair(); :};

empty ::= ;